<refentry id="libgnome-gnome-util">
<refmeta>
<refentrytitle role="top_of_page" id="libgnome-gnome-util.top_of_page">gnome-util</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBGNOME Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>gnome-util</refname>
<refpurpose>Miscellaneous utility functions.</refpurpose>
</refnamediv>

<refsynopsisdiv id="libgnome-gnome-util.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>

#include &lt;libgnome/libgnome.h&gt;

#define             <link linkend="gnome-is-program-in-path">gnome_is_program_in_path</link>            (program)
const <link linkend="char">char</link> *        <link linkend="g-extension-pointer">g_extension_pointer</link>                 (const <link linkend="char">char</link> *path);
#define             <link linkend="gnome-util-prepend-user-home">gnome_util_prepend_user_home</link>        (x)
#define             <link linkend="gnome-util-home-file">gnome_util_home_file</link>                (afile)
<link linkend="char">char</link> *              <link linkend="gnome-util-user-shell">gnome_util_user_shell</link>               (void);
<link linkend="int">int</link>                 <link linkend="gnome-setenv">gnome_setenv</link>                        (const <link linkend="char">char</link> *name,
                                                         const <link linkend="char">char</link> *value,
                                                         <link linkend="gboolean">gboolean</link> overwrite);
<link linkend="void">void</link>                <link linkend="gnome-unsetenv">gnome_unsetenv</link>                      (const <link linkend="char">char</link> *name);
<link linkend="void">void</link>                <link linkend="gnome-clearenv">gnome_clearenv</link>                      (void);

#define             <link linkend="g-concat-dir-and-file">g_concat_dir_and_file</link>               (dir,file)
#define             <link linkend="g-file-exists">g_file_exists</link>                       (filename)
#define             <link linkend="g-unix-error-string">g_unix_error_string</link>                 (error_num)
#define             <link linkend="gnome-util-user-home">gnome_util_user_home</link>                ()
#define             <link linkend="g-copy-vector">g_copy_vector</link>                       (vec)
#define             <link linkend="gnome-libdir-file">gnome_libdir_file</link>                   (f)
#define             <link linkend="gnome-datadir-file">gnome_datadir_file</link>                  (f)
#define             <link linkend="gnome-sound-file">gnome_sound_file</link>                    (f)
#define             <link linkend="gnome-pixmap-file">gnome_pixmap_file</link>                   (f)
#define             <link linkend="gnome-config-file">gnome_config_file</link>                   (f)
#define             <link linkend="gnome-unconditional-libdir-file">gnome_unconditional_libdir_file</link>     (f)
#define             <link linkend="gnome-unconditional-datadir-file">gnome_unconditional_datadir_file</link>    (f)
#define             <link linkend="gnome-unconditional-sound-file">gnome_unconditional_sound_file</link>      (f)
#define             <link linkend="gnome-unconditional-pixmap-file">gnome_unconditional_pixmap_file</link>     (f)
#define             <link linkend="gnome-unconditional-config-file">gnome_unconditional_config_file</link>     (f)
</synopsis>
</refsynopsisdiv>









<refsect1 id="libgnome-gnome-util.description" role="desc">
<title role="desc.title">Description</title>
<para>
The functions in this section provide some shortcuts to finding certain file
paths. There are also some functions for manipulating environment variables for
those systems that do not have <function><link linkend="getenv"><function>getenv()</function></link></function> and similar
functions.
</para>
<note>
   <para>
   Many of the function in here are now deprecated in favour of similar
   functions in glib. The preferred replacement function in those cases is
   indicated below.
   </para>
</note>
</refsect1>

<refsect1 id="libgnome-gnome-util.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="gnome-is-program-in-path" role="macro" condition="deprecated:">
<title>gnome_is_program_in_path()</title>
<indexterm zone="gnome-is-program-in-path" role="deprecated"><primary sortas="gnome_is_program_in_path">gnome_is_program_in_path</primary></indexterm><programlisting>#define             gnome_is_program_in_path(program)</programlisting>
<warning><para><literal>gnome_is_program_in_path</literal> is deprecated and should not be used in newly-written code.</para></warning>
<para>
Deprecated, use <link linkend="g-find-program-in-path"><type>g_find_program_in_path</type></link></para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>program</parameter>&#160;:</term>
<listitem><simpara> A program name.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="NULL--CAPS"><literal>NULL</literal></link> if program is not on the path or a string
allocated with <link linkend="g-malloc"><function>g_malloc()</function></link> with the full path name of the program
found.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g-extension-pointer" role="function">
<title>g_extension_pointer ()</title>
<indexterm zone="g-extension-pointer"><primary sortas="g_extension_pointer">g_extension_pointer</primary></indexterm><programlisting>const <link linkend="char">char</link> *        g_extension_pointer                 (const <link linkend="char">char</link> *path);</programlisting>
<para>
Extracts the extension from the end of a filename (the part after the final
'.' in the filename).</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>path</parameter>&#160;:</term>
<listitem><simpara> A filename or file path.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A pointer to the extension part of the filename, or a
pointer to the end of the string if the filename does not
have an extension.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnome-util-prepend-user-home" role="macro">
<title>gnome_util_prepend_user_home()</title>
<indexterm zone="gnome-util-prepend-user-home"><primary sortas="gnome_util_prepend_user_home">gnome_util_prepend_user_home</primary></indexterm><programlisting>#define             gnome_util_prepend_user_home(x)</programlisting>
<para>
Prepends the home directory of the user to a filename.
</para><variablelist role="params">
<varlistentry><term><parameter>x</parameter>&#160;:</term>
<listitem><simpara>A relative filename in the user's home directory.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>A string containing <parameter>x</parameter> with the user's home directory path prepended.
The string should be freed with <link linkend="g-free"><function>g_free()</function></link> when no longer required.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnome-util-home-file" role="macro">
<title>gnome_util_home_file()</title>
<indexterm zone="gnome-util-home-file"><primary sortas="gnome_util_home_file">gnome_util_home_file</primary></indexterm><programlisting>#define             gnome_util_home_file(afile)</programlisting>
<para>
Similar to <link linkend="gnome-util-prepend-user-home"><function>gnome_util_prepend_user_home()</function></link>, except that "/home/fred/.gnome2",
instead of just "/home/fred/" is put on the front.
</para><variablelist role="params">
<varlistentry><term><parameter>afile</parameter>&#160;:</term>
<listitem><simpara> A filename relative to the user's .gnome2 directory.
Returns: A string containing <parameter>afile</parameter> with the user's home directory path  and
"/.gnome2" prepended. The string should be freed with <link linkend="g-free"><function>g_free()</function></link> when no longer
required.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnome-util-user-shell" role="function">
<title>gnome_util_user_shell ()</title>
<indexterm zone="gnome-util-user-shell"><primary sortas="gnome_util_user_shell">gnome_util_user_shell</primary></indexterm><programlisting><link linkend="char">char</link> *              gnome_util_user_shell               (void);</programlisting>
<para>
Retrieves the user's preferred shell.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A newly allocated string that is the path to the shell.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnome-setenv" role="function">
<title>gnome_setenv ()</title>
<indexterm zone="gnome-setenv"><primary sortas="gnome_setenv">gnome_setenv</primary></indexterm><programlisting><link linkend="int">int</link>                 gnome_setenv                        (const <link linkend="char">char</link> *name,
                                                         const <link linkend="char">char</link> *value,
                                                         <link linkend="gboolean">gboolean</link> overwrite);</programlisting>
<para>
Adds "<parameter>name</parameter>=<parameter>value</parameter>" to the environment. Note that on systems without setenv,
this leaks memory so please do not use inside a loop or anything like that.
The semantics are the same as the glibc <link linkend="setenv"><function>setenv()</function></link> (if <link linkend="setenv"><function>setenv()</function></link> exists, it is
used).
</para>
<para>
If <parameter>overwrite</parameter> is <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> and the variable already exists in the environment,
then <link linkend="0--CAPS"><literal>0</literal></link> is returned and the value is not changed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> An environment variable name.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara> The value to assign to the environment variable.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>overwrite</parameter>&#160;:</term>
<listitem><simpara> If <link linkend="TRUE--CAPS"><literal>TRUE</literal></link>, overwrite the existing <parameter>name</parameter> variable in the
environment.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="0--CAPS"><literal>0</literal></link> on success, <link linkend="1--CAPS"><literal>-1</literal></link> on error

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnome-unsetenv" role="function">
<title>gnome_unsetenv ()</title>
<indexterm zone="gnome-unsetenv"><primary sortas="gnome_unsetenv">gnome_unsetenv</primary></indexterm><programlisting><link linkend="void">void</link>                gnome_unsetenv                      (const <link linkend="char">char</link> *name);</programlisting>
<para>
Removes <parameter>name</parameter> from the environment.
In case there is no native implementation of unsetenv,
this could cause leaks depending on the implementation of
environment.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> The environment variable to unset.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnome-clearenv" role="function">
<title>gnome_clearenv ()</title>
<indexterm zone="gnome-clearenv"><primary sortas="gnome_clearenv">gnome_clearenv</primary></indexterm><programlisting><link linkend="void">void</link>                gnome_clearenv                      (void);</programlisting>
<para>
Clears out the environment completely.
In case there is no native implementation of clearenv,
this could cause leaks depending on the implementation
of environment.</para>
<para>
</para></refsect2>
<refsect2 id="g-concat-dir-and-file" role="macro" condition="deprecated:">
<title>g_concat_dir_and_file()</title>
<indexterm zone="g-concat-dir-and-file" role="deprecated"><primary sortas="g_concat_dir_and_file">g_concat_dir_and_file</primary></indexterm><programlisting>#define             g_concat_dir_and_file(dir,file)</programlisting>
<warning><para><literal>g_concat_dir_and_file</literal> is deprecated and should not be used in newly-written code.</para></warning>
<para>
Programs should use <link linkend="g-build-filename"><function>g_build_filename()</function></link> instead of this function.
</para><variablelist role="params">
<varlistentry><term><parameter>dir</parameter>&#160;:</term>
<listitem><simpara>Directory name.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>file</parameter>&#160;:</term>
<listitem><simpara>Filename.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>A newly allocated string that is the concatenation of <parameter>dir</parameter> and <parameter>file</parameter>,
with seperators appropriate for the filesystem automatically taken care of.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g-file-exists" role="macro" condition="deprecated:">
<title>g_file_exists()</title>
<indexterm zone="g-file-exists" role="deprecated"><primary sortas="g_file_exists">g_file_exists</primary></indexterm><programlisting>#define             g_file_exists(filename)</programlisting>
<warning><para><literal>g_file_exists</literal> is deprecated and should not be used in newly-written code.</para></warning>
<para>
Programs should use g_file_test(<parameter>filename</parameter>, G_FILE_TEST_EXISTS) instead of this
function.
</para><variablelist role="params">
<varlistentry><term><parameter>filename</parameter>&#160;:</term>
<listitem><simpara>Filename.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>Returns <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if <parameter>filename</parameter> exists, <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g-unix-error-string" role="macro" condition="deprecated:">
<title>g_unix_error_string()</title>
<indexterm zone="g-unix-error-string" role="deprecated"><primary sortas="g_unix_error_string">g_unix_error_string</primary></indexterm><programlisting>#define             g_unix_error_string(error_num)</programlisting>
<warning><para><literal>g_unix_error_string</literal> is deprecated and should not be used in newly-written code.</para></warning>
<para>
Programs should use <link linkend="g-strerror"><function>g_strerror()</function></link> instead of this function. Also, note that the
returned string is only valid until the next call to <link linkend="g-strerror"><function>g_strerror()</function></link> or
<link linkend="g-unix-error-string"><function>g_unix_error_string()</function></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>error_num</parameter>&#160;:</term>
<listitem><simpara>A system error number (see C <link linkend="errno"><type>errno</type></link> documentation for more info).
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>A string describing the error code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnome-util-user-home" role="macro" condition="deprecated:">
<title>gnome_util_user_home()</title>
<indexterm zone="gnome-util-user-home" role="deprecated"><primary sortas="gnome_util_user_home">gnome_util_user_home</primary></indexterm><programlisting>#define             gnome_util_user_home()</programlisting>
<warning><para><literal>gnome_util_user_home</literal> is deprecated and should not be used in newly-written code.</para></warning>
<para>
Programs should use <link linkend="g-get-home-dir"><function>g_get_home_dir()</function></link> instead of this function.
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>The current user's home directory.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g-copy-vector" role="macro" condition="deprecated:">
<title>g_copy_vector()</title>
<indexterm zone="g-copy-vector" role="deprecated"><primary sortas="g_copy_vector">g_copy_vector</primary></indexterm><programlisting>#define             g_copy_vector(vec)</programlisting>
<warning><para><literal>g_copy_vector</literal> is deprecated and should not be used in newly-written code.</para></warning>
<para>
Use <link linkend="g-strdupv"><function>g_strdupv()</function></link> instead of this function.
</para><variablelist role="params">
<varlistentry><term><parameter>vec</parameter>&#160;:</term>
<listitem><simpara>An array of strings. <link linkend="NULL--CAPS"><literal>NULL</literal></link> terminated.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>A copy of the <link linkend="NULL--CAPS"><literal>NULL</literal></link>-terminated string array.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnome-libdir-file" role="macro" condition="deprecated:">
<title>gnome_libdir_file()</title>
<indexterm zone="gnome-libdir-file" role="deprecated"><primary sortas="gnome_libdir_file">gnome_libdir_file</primary></indexterm><programlisting>#define             gnome_libdir_file(f)</programlisting>
<warning><para><literal>gnome_libdir_file</literal> is deprecated and should not be used in newly-written code.</para></warning>
<para>
Programs should use <link linkend="gnome-program-locate-file"><function>gnome_program_locate_file()</function></link> instead of this function.
</para><variablelist role="params">
<varlistentry><term><parameter>f</parameter>&#160;:</term>
<listitem><simpara>Filename.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>A full path to the file <parameter>f</parameter> that is stored in the system's GNOME
library directory (not the application's directory).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnome-datadir-file" role="macro" condition="deprecated:">
<title>gnome_datadir_file()</title>
<indexterm zone="gnome-datadir-file" role="deprecated"><primary sortas="gnome_datadir_file">gnome_datadir_file</primary></indexterm><programlisting>#define             gnome_datadir_file(f)</programlisting>
<warning><para><literal>gnome_datadir_file</literal> is deprecated and should not be used in newly-written code.</para></warning>
<para>
Programs should use <link linkend="gnome-program-locate-file"><function>gnome_program_locate_file()</function></link> instead of this function.
</para><variablelist role="params">
<varlistentry><term><parameter>f</parameter>&#160;:</term>
<listitem><simpara>Filename.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>A full path to the file <parameter>f</parameter> that is stored in the system's GNOME
data directory (not the application's directory).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnome-sound-file" role="macro" condition="deprecated:">
<title>gnome_sound_file()</title>
<indexterm zone="gnome-sound-file" role="deprecated"><primary sortas="gnome_sound_file">gnome_sound_file</primary></indexterm><programlisting>#define             gnome_sound_file(f)</programlisting>
<warning><para><literal>gnome_sound_file</literal> is deprecated and should not be used in newly-written code.</para></warning>
<para>
Programs should use <link linkend="gnome-program-locate-file"><function>gnome_program_locate_file()</function></link> instead of this function.
</para><variablelist role="params">
<varlistentry><term><parameter>f</parameter>&#160;:</term>
<listitem><simpara>Filename.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>A full path to the file <parameter>f</parameter> that is stored in the system's GNOME
sound files directory (not the application's directory).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnome-pixmap-file" role="macro" condition="deprecated:">
<title>gnome_pixmap_file()</title>
<indexterm zone="gnome-pixmap-file" role="deprecated"><primary sortas="gnome_pixmap_file">gnome_pixmap_file</primary></indexterm><programlisting>#define             gnome_pixmap_file(f)</programlisting>
<warning><para><literal>gnome_pixmap_file</literal> is deprecated and should not be used in newly-written code.</para></warning>
<para>
Programs should use <link linkend="gnome-program-locate-file"><function>gnome_program_locate_file()</function></link> instead of this function.
</para><variablelist role="params">
<varlistentry><term><parameter>f</parameter>&#160;:</term>
<listitem><simpara>Filename.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>A full path to the file <parameter>f</parameter> that is stored in the system's GNOME
pixmap directory (not the application's directory).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnome-config-file" role="macro" condition="deprecated:">
<title>gnome_config_file()</title>
<indexterm zone="gnome-config-file" role="deprecated"><primary sortas="gnome_config_file">gnome_config_file</primary></indexterm><programlisting>#define             gnome_config_file(f)</programlisting>
<warning><para><literal>gnome_config_file</literal> is deprecated and should not be used in newly-written code.</para></warning>
<para>
Programs should use <link linkend="gnome-program-locate-file"><function>gnome_program_locate_file()</function></link> instead of this function.
</para><variablelist role="params">
<varlistentry><term><parameter>f</parameter>&#160;:</term>
<listitem><simpara>Filename.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>A full path to the file <parameter>f</parameter> that is stored in the system's GNOME
config directory (not the application's directory).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnome-unconditional-libdir-file" role="macro" condition="deprecated:">
<title>gnome_unconditional_libdir_file()</title>
<indexterm zone="gnome-unconditional-libdir-file" role="deprecated"><primary sortas="gnome_unconditional_libdir_file">gnome_unconditional_libdir_file</primary></indexterm><programlisting>#define             gnome_unconditional_libdir_file(f)</programlisting>
<warning><para><literal>gnome_unconditional_libdir_file</literal> is deprecated and should not be used in newly-written code.</para></warning>
<para>
Programs should use <link linkend="gnome-program-locate-file"><function>gnome_program_locate_file()</function></link> instead of this function.
</para><variablelist role="params">
<varlistentry><term><parameter>f</parameter>&#160;:</term>
<listitem><simpara>Filename.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>A full path to the file <parameter>f</parameter> that is stored in the system's GNOME
library directory (not the application's directory).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnome-unconditional-datadir-file" role="macro" condition="deprecated:">
<title>gnome_unconditional_datadir_file()</title>
<indexterm zone="gnome-unconditional-datadir-file" role="deprecated"><primary sortas="gnome_unconditional_datadir_file">gnome_unconditional_datadir_file</primary></indexterm><programlisting>#define             gnome_unconditional_datadir_file(f)</programlisting>
<warning><para><literal>gnome_unconditional_datadir_file</literal> is deprecated and should not be used in newly-written code.</para></warning>
<para>
Programs should use <link linkend="gnome-program-locate-file"><function>gnome_program_locate_file()</function></link> instead of this function.
</para><variablelist role="params">
<varlistentry><term><parameter>f</parameter>&#160;:</term>
<listitem><simpara>Filename.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>A full path to the file <parameter>f</parameter> that is stored in the system's GNOME
data directory (not the application's directory).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnome-unconditional-sound-file" role="macro" condition="deprecated:">
<title>gnome_unconditional_sound_file()</title>
<indexterm zone="gnome-unconditional-sound-file" role="deprecated"><primary sortas="gnome_unconditional_sound_file">gnome_unconditional_sound_file</primary></indexterm><programlisting>#define             gnome_unconditional_sound_file(f)</programlisting>
<warning><para><literal>gnome_unconditional_sound_file</literal> is deprecated and should not be used in newly-written code.</para></warning>
<para>
Programs should use <link linkend="gnome-program-locate-file"><function>gnome_program_locate_file()</function></link> instead of this function.
</para><variablelist role="params">
<varlistentry><term><parameter>f</parameter>&#160;:</term>
<listitem><simpara>Filename.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>A full path to the file <parameter>f</parameter> that is stored in the system's GNOME
sound files directory (not the application's directory).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnome-unconditional-pixmap-file" role="macro" condition="deprecated:">
<title>gnome_unconditional_pixmap_file()</title>
<indexterm zone="gnome-unconditional-pixmap-file" role="deprecated"><primary sortas="gnome_unconditional_pixmap_file">gnome_unconditional_pixmap_file</primary></indexterm><programlisting>#define             gnome_unconditional_pixmap_file(f)</programlisting>
<warning><para><literal>gnome_unconditional_pixmap_file</literal> is deprecated and should not be used in newly-written code.</para></warning>
<para>
Programs should use <link linkend="gnome-program-locate-file"><function>gnome_program_locate_file()</function></link> instead of this function.
</para><variablelist role="params">
<varlistentry><term><parameter>f</parameter>&#160;:</term>
<listitem><simpara>Filename.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>A full path to the file <parameter>f</parameter> that is stored in the system's GNOME
pixmap directory (not the application's directory).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnome-unconditional-config-file" role="macro" condition="deprecated:">
<title>gnome_unconditional_config_file()</title>
<indexterm zone="gnome-unconditional-config-file" role="deprecated"><primary sortas="gnome_unconditional_config_file">gnome_unconditional_config_file</primary></indexterm><programlisting>#define             gnome_unconditional_config_file(f)</programlisting>
<warning><para><literal>gnome_unconditional_config_file</literal> is deprecated and should not be used in newly-written code.</para></warning>
<para>
Programs should use <link linkend="gnome-program-locate-file"><function>gnome_program_locate_file()</function></link> instead of this function.
</para><variablelist role="params">
<varlistentry><term><parameter>f</parameter>&#160;:</term>
<listitem><simpara>Filename.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>A full path to the file <parameter>f</parameter> that is stored in the system's GNOME
config directory (not the application's directory).
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
