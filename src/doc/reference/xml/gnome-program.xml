<refentry id="libgnome-gnome-program">
<refmeta>
<refentrytitle role="top_of_page" id="libgnome-gnome-program.top_of_page">gnome-program</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBGNOME Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>gnome-program</refname>
<refpurpose>Initialize and retrieve information about a GNOME application.</refpurpose>
</refnamediv>

<refsynopsisdiv id="libgnome-gnome-program.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>

#include &lt;libgnome/libgnome.h&gt;

enum                <link linkend="GnomeFileDomain">GnomeFileDomain</link>;
                    <link linkend="GnomeProgram">GnomeProgram</link>;
                    <link linkend="GnomeModuleInfo">GnomeModuleInfo</link>;
                    <link linkend="GnomeModuleRequirement">GnomeModuleRequirement</link>;
<link linkend="void">void</link>                (<link linkend="GnomeModuleInitHook">*GnomeModuleInitHook</link>)              (const <link linkend="GnomeModuleInfo">GnomeModuleInfo</link> *mod_info);
<link linkend="void">void</link>                (<link linkend="GnomeModuleClassInitHook">*GnomeModuleClassInitHook</link>)         (<link linkend="GnomeProgramClass">GnomeProgramClass</link> *klass,
                                                         const <link linkend="GnomeModuleInfo">GnomeModuleInfo</link> *mod_info);
<link linkend="void">void</link>                (<link linkend="GnomeModuleHook">*GnomeModuleHook</link>)                  (<link linkend="GnomeProgram">GnomeProgram</link> *program,
                                                         <link linkend="GnomeModuleInfo">GnomeModuleInfo</link> *mod_info);
<link linkend="GnomeProgram">GnomeProgram</link> *      <link linkend="gnome-program-init">gnome_program_init</link>                  (const <link linkend="char">char</link> *app_id,
                                                         const <link linkend="char">char</link> *app_version,
                                                         const <link linkend="GnomeModuleInfo">GnomeModuleInfo</link> *module_info,
                                                         <link linkend="int">int</link> argc,
                                                         <link linkend="char">char</link> **argv,
                                                         const <link linkend="char">char</link> *first_property_name,
                                                         ...);
<link linkend="GnomeProgram">GnomeProgram</link> *      <link linkend="gnome-program-initv">gnome_program_initv</link>                 (<link linkend="GType">GType</link> type,
                                                         const <link linkend="char">char</link> *app_id,
                                                         const <link linkend="char">char</link> *app_version,
                                                         const <link linkend="GnomeModuleInfo">GnomeModuleInfo</link> *module_info,
                                                         <link linkend="int">int</link> argc,
                                                         <link linkend="char">char</link> **argv,
                                                         const <link linkend="char">char</link> *first_property_name,
                                                         <link linkend="va-list">va_list</link> args);

<link linkend="GnomeProgram">GnomeProgram</link> *      <link linkend="gnome-program-get">gnome_program_get</link>                   (void);
const <link linkend="char">char</link> *        <link linkend="gnome-program-get-human-readable-name">gnome_program_get_human_readable_name</link>
                                                        (<link linkend="GnomeProgram">GnomeProgram</link> *program);
const <link linkend="char">char</link> *        <link linkend="gnome-program-get-app-id">gnome_program_get_app_id</link>            (<link linkend="GnomeProgram">GnomeProgram</link> *program);
const <link linkend="char">char</link> *        <link linkend="gnome-program-get-app-version">gnome_program_get_app_version</link>       (<link linkend="GnomeProgram">GnomeProgram</link> *program);
<link linkend="gchar">gchar</link> *             <link linkend="gnome-program-locate-file">gnome_program_locate_file</link>           (<link linkend="GnomeProgram">GnomeProgram</link> *program,
                                                         <link linkend="GnomeFileDomain">GnomeFileDomain</link> domain,
                                                         const <link linkend="gchar">gchar</link> *file_name,
                                                         <link linkend="gboolean">gboolean</link> only_if_exists,
                                                         <link linkend="GSList">GSList</link> **ret_locations);

<link linkend="void">void</link>                <link linkend="gnome-program-module-register">gnome_program_module_register</link>       (const <link linkend="GnomeModuleInfo">GnomeModuleInfo</link> *module_info);
<link linkend="gboolean">gboolean</link>            <link linkend="gnome-program-module-registered">gnome_program_module_registered</link>     (const <link linkend="GnomeModuleInfo">GnomeModuleInfo</link> *module_info);
const <link linkend="GnomeModuleInfo">GnomeModuleInfo</link> * <link linkend="gnome-program-module-load">gnome_program_module_load</link>       (const <link linkend="char">char</link> *mod_name);
<link linkend="guint">guint</link>               <link linkend="gnome-program-install-property">gnome_program_install_property</link>      (<link linkend="GnomeProgramClass">GnomeProgramClass</link> *pclass,
                                                         <link linkend="GObjectGetPropertyFunc">GObjectGetPropertyFunc</link> get_fn,
                                                         <link linkend="GObjectSetPropertyFunc">GObjectSetPropertyFunc</link> set_fn,
                                                         <link linkend="GParamSpec">GParamSpec</link> *pspec);
<link linkend="poptContext">poptContext</link>         <link linkend="gnome-program-preinit">gnome_program_preinit</link>               (<link linkend="GnomeProgram">GnomeProgram</link> *program,
                                                         const <link linkend="char">char</link> *app_id,
                                                         const <link linkend="char">char</link> *app_version,
                                                         <link linkend="int">int</link> argc,
                                                         <link linkend="char">char</link> **argv);
<link linkend="void">void</link>                <link linkend="gnome-program-parse-args">gnome_program_parse_args</link>            (<link linkend="GnomeProgram">GnomeProgram</link> *program);
<link linkend="void">void</link>                <link linkend="gnome-program-postinit">gnome_program_postinit</link>              (<link linkend="GnomeProgram">GnomeProgram</link> *program);

#define             <link linkend="GNOME-PARAM-POPT-TABLE--CAPS">GNOME_PARAM_POPT_TABLE</link>
#define             <link linkend="GNOME-PARAM-POPT-FLAGS--CAPS">GNOME_PARAM_POPT_FLAGS</link>
#define             <link linkend="GNOME-PARAM-POPT-CONTEXT--CAPS">GNOME_PARAM_POPT_CONTEXT</link>
#define             <link linkend="GNOME-PARAM-GOPTION-CONTEXT--CAPS">GNOME_PARAM_GOPTION_CONTEXT</link>
#define             <link linkend="GNOME-PARAM-CREATE-DIRECTORIES--CAPS">GNOME_PARAM_CREATE_DIRECTORIES</link>
#define             <link linkend="GNOME-PARAM-ENABLE-SOUND--CAPS">GNOME_PARAM_ENABLE_SOUND</link>
#define             <link linkend="GNOME-PARAM-ESPEAKER--CAPS">GNOME_PARAM_ESPEAKER</link>
#define             <link linkend="GNOME-PARAM-APP-ID--CAPS">GNOME_PARAM_APP_ID</link>
#define             <link linkend="GNOME-PARAM-APP-VERSION--CAPS">GNOME_PARAM_APP_VERSION</link>
#define             <link linkend="GNOME-PARAM-GNOME-PREFIX--CAPS">GNOME_PARAM_GNOME_PREFIX</link>
#define             <link linkend="GNOME-PARAM-GNOME-SYSCONFDIR--CAPS">GNOME_PARAM_GNOME_SYSCONFDIR</link>
#define             <link linkend="GNOME-PARAM-GNOME-DATADIR--CAPS">GNOME_PARAM_GNOME_DATADIR</link>
#define             <link linkend="GNOME-PARAM-GNOME-LIBDIR--CAPS">GNOME_PARAM_GNOME_LIBDIR</link>
#define             <link linkend="GNOME-PARAM-APP-PREFIX--CAPS">GNOME_PARAM_APP_PREFIX</link>
#define             <link linkend="GNOME-PARAM-APP-SYSCONFDIR--CAPS">GNOME_PARAM_APP_SYSCONFDIR</link>
#define             <link linkend="GNOME-PARAM-APP-DATADIR--CAPS">GNOME_PARAM_APP_DATADIR</link>
#define             <link linkend="GNOME-PARAM-APP-LIBDIR--CAPS">GNOME_PARAM_APP_LIBDIR</link>
#define             <link linkend="GNOME-PARAM-HUMAN-READABLE-NAME--CAPS">GNOME_PARAM_HUMAN_READABLE_NAME</link>
#define             <link linkend="GNOME-PARAM-GNOME-PATH--CAPS">GNOME_PARAM_GNOME_PATH</link>
#define             <link linkend="GNOME-PARAM-NONE--CAPS">GNOME_PARAM_NONE</link>
#define             <link linkend="GNOME-PROGRAM-STANDARD-PROPERTIES--CAPS">GNOME_PROGRAM_STANDARD_PROPERTIES</link>
</synopsis>
</refsynopsisdiv>









<refsect1 id="libgnome-gnome-program.description" role="desc">
<title role="desc.title">Description</title>
<para>
</para>
</refsect1>

<refsect1 id="libgnome-gnome-program.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="GnomeFileDomain" role="enum">
<title>enum GnomeFileDomain</title>
<indexterm zone="GnomeFileDomain"><primary sortas="GnomeFileDomain">GnomeFileDomain</primary></indexterm><programlisting>typedef enum {
    GNOME_FILE_DOMAIN_UNKNOWN = 0,

    /* Gnome installed files */
    GNOME_FILE_DOMAIN_LIBDIR,
    GNOME_FILE_DOMAIN_DATADIR,
    GNOME_FILE_DOMAIN_SOUND,
    GNOME_FILE_DOMAIN_PIXMAP,
    GNOME_FILE_DOMAIN_CONFIG,
    GNOME_FILE_DOMAIN_HELP,

    /* Application files */
    GNOME_FILE_DOMAIN_APP_LIBDIR,
    GNOME_FILE_DOMAIN_APP_DATADIR,
    GNOME_FILE_DOMAIN_APP_SOUND,
    GNOME_FILE_DOMAIN_APP_PIXMAP,
    GNOME_FILE_DOMAIN_APP_CONFIG,
    GNOME_FILE_DOMAIN_APP_HELP
} GnomeFileDomain;
</programlisting>
<para>
Many of the files that a GNOME application needs to access will be installed in
standard locations. For example, GNOME help files will be in one location,
while help files specific to the current application might be in another
location.
</para>
<para>
The different types of files are given in this enum. User applications make use
of the <structfield>GNOME_FILE_DOMAIN_APP_*</structfield> types, which specify
locations relative to <link linkend="GNOME-PARAM-APP-DATADIR--CAPS"><type>GNOME_PARAM_APP_DATADIR</type></link>.
</para><variablelist role="enum">
<varlistentry id="GNOME-FILE-DOMAIN-UNKNOWN--CAPS" role="constant">
<term><literal>GNOME_FILE_DOMAIN_UNKNOWN</literal></term>
<listitem><simpara>An unknown file domain (should never be used).
</simpara></listitem>
</varlistentry>
<varlistentry id="GNOME-FILE-DOMAIN-LIBDIR--CAPS" role="constant">
<term><literal>GNOME_FILE_DOMAIN_LIBDIR</literal></term>
<listitem><simpara>Libraries in the main GNOME installation.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNOME-FILE-DOMAIN-DATADIR--CAPS" role="constant">
<term><literal>GNOME_FILE_DOMAIN_DATADIR</literal></term>
<listitem><simpara>Data files in the main GNOME installation.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNOME-FILE-DOMAIN-SOUND--CAPS" role="constant">
<term><literal>GNOME_FILE_DOMAIN_SOUND</literal></term>
<listitem><simpara>Sound files in the main GNOME installation.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNOME-FILE-DOMAIN-PIXMAP--CAPS" role="constant">
<term><literal>GNOME_FILE_DOMAIN_PIXMAP</literal></term>
<listitem><simpara>Pixmap files in the main GNOME installation.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNOME-FILE-DOMAIN-CONFIG--CAPS" role="constant">
<term><literal>GNOME_FILE_DOMAIN_CONFIG</literal></term>
<listitem><simpara>Config files in the main GNOME installation.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNOME-FILE-DOMAIN-HELP--CAPS" role="constant">
<term><literal>GNOME_FILE_DOMAIN_HELP</literal></term>
<listitem><simpara>Help files in the main GNOME installation.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNOME-FILE-DOMAIN-APP-LIBDIR--CAPS" role="constant">
<term><literal>GNOME_FILE_DOMAIN_APP_LIBDIR</literal></term>
<listitem><simpara>Application specific libraries.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNOME-FILE-DOMAIN-APP-DATADIR--CAPS" role="constant">
<term><literal>GNOME_FILE_DOMAIN_APP_DATADIR</literal></term>
<listitem><simpara>Application specific data files.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNOME-FILE-DOMAIN-APP-SOUND--CAPS" role="constant">
<term><literal>GNOME_FILE_DOMAIN_APP_SOUND</literal></term>
<listitem><simpara>Application specific sound files.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNOME-FILE-DOMAIN-APP-PIXMAP--CAPS" role="constant">
<term><literal>GNOME_FILE_DOMAIN_APP_PIXMAP</literal></term>
<listitem><simpara>Application specific pixmap files.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNOME-FILE-DOMAIN-APP-CONFIG--CAPS" role="constant">
<term><literal>GNOME_FILE_DOMAIN_APP_CONFIG</literal></term>
<listitem><simpara>Application specific config files.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNOME-FILE-DOMAIN-APP-HELP--CAPS" role="constant">
<term><literal>GNOME_FILE_DOMAIN_APP_HELP</literal></term>
<listitem><simpara>Application specific help files.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="GnomeProgram" role="struct">
<title>GnomeProgram</title>
<indexterm zone="GnomeProgram"><primary sortas="GnomeProgram">GnomeProgram</primary></indexterm><programlisting>typedef struct {
    GObject object;

    GnomeProgramPrivate *_priv;
} GnomeProgram;
</programlisting>
<para>
A structure containing information about the current application. Initialised
during a call to <link linkend="gnome-program-init"><function>gnome_program_init()</function></link>.
</para><variablelist role="struct">
<varlistentry>
<term><link linkend="GObject">GObject</link>&#160;<structfield>object</structfield>;</term>
<listitem><simpara>A <link linkend="GObject"><type>GObject</type></link> containing the parameters and their values which were set
dring initialisation.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="GnomeProgramPrivate">GnomeProgramPrivate</link>&#160;*<structfield>_priv</structfield>;</term>
<listitem><simpara>Private data about the program instance.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="GnomeModuleInfo" role="struct">
<title>GnomeModuleInfo</title>
<indexterm zone="GnomeModuleInfo"><primary sortas="GnomeModuleInfo">GnomeModuleInfo</primary></indexterm><programlisting>typedef struct {
    const char *name;
    const char *version;
    const char *description;
    GnomeModuleRequirement *requirements; /* last element has NULL version */

    GnomeModuleHook instance_init;
    GnomeModuleHook pre_args_parse, post_args_parse;

#ifdef GNOME_DISABLE_DEPRECATED
    void *_options;
#else
    struct poptOption *options;
#endif

    GnomeModuleInitHook init_pass;

    GnomeModuleClassInitHook class_init;

    const char *opt_prefix;
    GnomeModuleGetGOptionGroupFunc get_goption_group_func;
} GnomeModuleInfo;
</programlisting>
<para>
A structure containing information about a module. This contains descriptive
information about the module, as well as how to initialise it and what its
dependencies are (chained via the <parameter>requirements</parameter> parameter).
</para><variablelist role="struct">
<varlistentry>
<term>const&#160;<link linkend="char">char</link>&#160;*<structfield>name</structfield>;</term>
<listitem><simpara>The module name.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term>const&#160;<link linkend="char">char</link>&#160;*<structfield>version</structfield>;</term>
<listitem><simpara>The module's version string.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term>const&#160;<link linkend="char">char</link>&#160;*<structfield>description</structfield>;</term>
<listitem><simpara>A string describing the module (can be <link linkend="NULL--CAPS"><literal>NULL</literal></link>).
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="GnomeModuleRequirement">GnomeModuleRequirement</link>&#160;*<structfield>requirements</structfield>;</term>
<listitem><simpara>A pointer to an array of modules that are required by this
module. The last module in the array should have its required_version field set
to <link linkend="NULL--CAPS"><literal>NULL</literal></link>.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="GnomeModuleHook">GnomeModuleHook</link>&#160;<structfield>instance_init</structfield>;</term>
<listitem><simpara>A function to call to initialise an instance of this module
(can be <link linkend="NULL--CAPS"><literal>NULL</literal></link>).
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="GnomeModuleHook">GnomeModuleHook</link>&#160;<structfield>pre_args_parse</structfield>;</term>
<listitem><simpara>A function to call before parsing the arguments for this
module (can be <link linkend="NULL--CAPS"><literal>NULL</literal></link>).
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="GnomeModuleHook">GnomeModuleHook</link>&#160;<structfield>post_args_parse</structfield>;</term>
<listitem><simpara>A function to call after parsing the arguments for this
module (can be <link linkend="NULL--CAPS"><literal>NULL</literal></link>).
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="void">void</link>&#160;*<structfield>_options</structfield>;</term>
<listitem><simpara>
</simpara></listitem>
</varlistentry>
<varlistentry>
<term>struct&#160;<link linkend="poptOption">poptOption</link>&#160;*<structfield>options</structfield>;</term>
<listitem><simpara>
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="GnomeModuleInitHook">GnomeModuleInitHook</link>&#160;<structfield>init_pass</structfield>;</term>
<listitem><simpara>
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="GnomeModuleClassInitHook">GnomeModuleClassInitHook</link>&#160;<structfield>class_init</structfield>;</term>
<listitem><simpara>A function to call to initialise this module prior to creating any
instances (can be <link linkend="NULL--CAPS"><literal>NULL</literal></link>).
</simpara></listitem>
</varlistentry>
<varlistentry>
<term>const&#160;<link linkend="char">char</link>&#160;*<structfield>opt_prefix</structfield>;</term>
<listitem><simpara>Unused.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="GnomeModuleGetGOptionGroupFunc">GnomeModuleGetGOptionGroupFunc</link>&#160;<structfield>get_goption_group_func</structfield>;</term>
<listitem><simpara>A function which must return a non-<link linkend="NULL--CAPS"><literal>NULL</literal></link> <link linkend="GOptionGroup"><type>GOptionGroup</type></link>,
which will be added to the <link linkend="GnomeProgram"><type>GnomeProgram</type></link> s <link linkend="GOptionContext"><type>GOptionContext</type></link> during
#<link linkend="gnome-program-init"><function>gnome_program_init()</function></link>.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="GnomeModuleRequirement" role="struct">
<title>GnomeModuleRequirement</title>
<indexterm zone="GnomeModuleRequirement"><primary sortas="GnomeModuleRequirement">GnomeModuleRequirement</primary></indexterm><programlisting>typedef struct {
    const char *required_version;
    const GnomeModuleInfo *module_info;
} GnomeModuleRequirement;
</programlisting>
<para>
A structure which allows a module to specify the minimum required versions of
modules it depends upon.
</para><variablelist role="struct">
<varlistentry>
<term>const&#160;<link linkend="char">char</link>&#160;*<structfield>required_version</structfield>;</term>
<listitem><simpara>The version required by the parent module.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term>const&#160;<link linkend="GnomeModuleInfo">GnomeModuleInfo</link>&#160;*<structfield>module_info</structfield>;</term>
<listitem><simpara>A <link linkend="GnomeModuleInfo"><type>GnomeModuleInfo</type></link> structure detailing the required module.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="GnomeModuleInitHook" role="function">
<title>GnomeModuleInitHook ()</title>
<indexterm zone="GnomeModuleInitHook"><primary sortas="GnomeModuleInitHook">GnomeModuleInitHook</primary></indexterm><programlisting><link linkend="void">void</link>                (*GnomeModuleInitHook)              (const <link linkend="GnomeModuleInfo">GnomeModuleInfo</link> *mod_info);</programlisting>
<para>
A function that will be called to allow a module to do any pre-initialisation
it might need to do prior to having arguments parsed by the controlling parent
module (the parent will do the argument parsing for all modules in the
hierarchy).
</para><variablelist role="params">
<varlistentry><term><parameter>mod_info</parameter>&#160;:</term>
<listitem><simpara>The current module.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="GnomeModuleClassInitHook" role="function">
<title>GnomeModuleClassInitHook ()</title>
<indexterm zone="GnomeModuleClassInitHook"><primary sortas="GnomeModuleClassInitHook">GnomeModuleClassInitHook</primary></indexterm><programlisting><link linkend="void">void</link>                (*GnomeModuleClassInitHook)         (<link linkend="GnomeProgramClass">GnomeProgramClass</link> *klass,
                                                         const <link linkend="GnomeModuleInfo">GnomeModuleInfo</link> *mod_info);</programlisting>
<para>
A function called to perform any class specific setup that is required by each
module.
</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&#160;:</term>
<listitem><simpara>The class of the parent module (which could be this module's class).
This will usually be <link linkend="GnomeProgramClass"><type>GnomeProgramClass</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>mod_info</parameter>&#160;:</term>
<listitem><simpara>The current module.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="GnomeModuleHook" role="function">
<title>GnomeModuleHook ()</title>
<indexterm zone="GnomeModuleHook"><primary sortas="GnomeModuleHook">GnomeModuleHook</primary></indexterm><programlisting><link linkend="void">void</link>                (*GnomeModuleHook)                  (<link linkend="GnomeProgram">GnomeProgram</link> *program,
                                                         <link linkend="GnomeModuleInfo">GnomeModuleInfo</link> *mod_info);</programlisting>
<para>
A function that is called to perform some intialisation in a module (which
could be either the main init function or the pre or post argument parsing
phase).
</para><variablelist role="params">
<varlistentry><term><parameter>program</parameter>&#160;:</term>
<listitem><simpara>The <link linkend="GnomeProgram"><type>GnomeProgram</type></link> instance which is being initialised.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>mod_info</parameter>&#160;:</term>
<listitem><simpara>The current module's <link linkend="GnomeModuleInfo"><type>GnomeModuleInfo</type></link> structure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnome-program-init" role="function">
<title>gnome_program_init ()</title>
<indexterm zone="gnome-program-init"><primary sortas="gnome_program_init">gnome_program_init</primary></indexterm><programlisting><link linkend="GnomeProgram">GnomeProgram</link> *      gnome_program_init                  (const <link linkend="char">char</link> *app_id,
                                                         const <link linkend="char">char</link> *app_version,
                                                         const <link linkend="GnomeModuleInfo">GnomeModuleInfo</link> *module_info,
                                                         <link linkend="int">int</link> argc,
                                                         <link linkend="char">char</link> **argv,
                                                         const <link linkend="char">char</link> *first_property_name,
                                                         ...);</programlisting>
<para>
Initialises the current GNOME libraries for use by the application.
<parameter>app_id</parameter> is used for the following purposes:
- to find the programme's help files by gnome_help_*()
- to load the app-specific gtkrc file from ~/.gnome2/$(APPID)rc
- to load/save the app's accelerators map from ~/.gnome2/accelerators/$(APPID)
- to load/save a GnomeEntry's history from gconf/apps/gnome-settings/$(APPID)/history-$(ENTRYID)</para>
<para>
Every GNOME application will need to call this function (or
<link linkend="gnome-program-initv"><function>gnome_program_initv()</function></link>) early in its lifetime to initialize the various GNOME
libraries in a consistent fashion. This function is very flexible in allowing
the user to specify which modules should be initialised and any special
paramter values that should be passed to these modules (along with processing
commandline options).
</para>
<para>
It loads the specified <parameter>module_info</parameter>, which is normally <link linkend="LIBGNOME-MODULE--CAPS"><type>LIBGNOME_MODULE</type></link> or
<link linkend="LIBGNOMEUI-MODULE--CAPS"><type>LIBGNOMEUI_MODULE</type></link> and pulls in all the dependencies.  Programs that are not
running in setuid or setgid mode will also load modules specified in the
<parameter class="option">--load-modules</parameter> and also in the <parameter
class="option">GNOME_MODULES</parameter> environment variable.
</para>
<para>The following example shows how one might initialise a typical program
using a goption table that is defined elsewhere.
</para>
<example>
<title>Initializing a GNOME application (deprecated, using popt)</title>
<programlisting>
int main(int argc, char **argv) {
	GnomeProgram *my_app;
	GOptionContext *option_context;
	/* We assume PACKAGE and VERSION are set to the program name and version
	 * number respectively. Also, assume that 'options' is a global array of
	 * poptOptions.
	 */
	option_context = g_option_context_new (PACKAGE);
	g_option_context_add_main_entries (option_context, options, NULL);
	my_app = gnome_program_init(PACKAGE, VERSION, LIBGNOMEUI_MODULE,
	                            argc, argv,
				    GNOME_PARAM_GOPTION_CONTEXT, option_context,
				    GNOME_PARAM_NONE);
	/* Now process any extra args, etc ... */
}
</programlisting>
</example>
<para>
Even though many applications still use popt for command-line option parsing,
it has been deprecated in Gnome-2.14 and its use is discouraged for
newly-written code. GNOME applications should aim to use the new
<link linkend="GOption"><type>GOption</type></link> API. Here an example that shows how one might initialize a typical
program using a GOptionEntry table (see the GLib documentation for a more
elaborate example of an option entry table):
<example>
<title>Initializing a GNOME application (new, using GOption)</title>
<programlisting>
int main(int argc, char **argv) {
	gchar **remaining_args = NULL;
	GOptionEntry option_entries[] = {
		/* ... your application&apos;s command line options go here ... */
		/* last but not least a special option that collects filenames */
		{ G_OPTION_REMAINING, 0, 0, G_OPTION_ARG_FILENAME_ARRAY,
		  &amp;remaining_args,
		  "Special option that collects any remaining arguments for us" },
		{ NULL }
	};
	GOptionContext *option_context;
	GnomeProgram *my_app;
	option_context = g_option_context_new ("my-app");
	/* if you are using any libraries that have command line options
	 * of their own and provide a GOptionGroup with them, you can
	 * add them here as well using g_option_context_add_group()
	 */
	/* now add our own application&apos;s command-line options. If you
	 * are using gettext for translations, you should be using
	 * GETTEXT_PACKAGE here instead of NULL
	 */
	g_option_context_add_main_entries (option_context, option_entries, NULL);
	/* We assume PACKAGE and VERSION are set to the program name and version
	 * number respectively. Also, assume that 'option_entries' is a global
	 * array of GOptionEntry structures.
	 */
	my_app = gnome_program_init(PACKAGE, VERSION,
	                            LIBGNOMEUI_MODULE, argc, argv,
	                            GNOME_PARAM_GOPTION_CONTEXT, option_context,
	                            GNOME_PARAM_NONE);
	/* parse remaining command-line arguments that are not
	 * options (e.g. filenames or URIs or whatever), if any
	 */
	if (remaining_args != NULL) {
	    gint i, num_args;
		num_args = g_strv_length (remaining_args);
		for (i = 0; i &lt; num_args; ++i) {
			/* process remaining_args[i] here */
		}
		g_strfreev (remaining_args);
		remaining_args = NULL;
	}
</programlisting>
</example>
</para><variablelist role="params">
<varlistentry><term><parameter>app_id</parameter>&#160;:</term>
<listitem><simpara> Application ID string.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>app_version</parameter>&#160;:</term>
<listitem><simpara> Application version string.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>module_info</parameter>&#160;:</term>
<listitem><simpara> The module to init with this program.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>argc</parameter>&#160;:</term>
<listitem><simpara> The number of commmand line arguments contained in <parameter>argv</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>argv</parameter>&#160;:</term>
<listitem><simpara> A string array of command line arguments.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>first_property_name</parameter>&#160;:</term>
<listitem><simpara> The first item in a <link linkend="NULL--CAPS"><literal>NULL</literal></link>-terminated list of attribute
name and value pairs (so this will be an attribute name or <link linkend="NULL--CAPS"><literal>NULL</literal></link>).
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter>&#160;:</term>
<listitem><simpara> The continuation of a <link linkend="NULL--CAPS"><literal>NULL</literal></link>-terminated list of attribute name/value
pairs.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A new <link linkend="GnomeProgram"><type>GnomeProgram</type></link> instance representing the current application.
Unref the returned reference right before exiting your application.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnome-program-initv" role="function">
<title>gnome_program_initv ()</title>
<indexterm zone="gnome-program-initv"><primary sortas="gnome_program_initv">gnome_program_initv</primary></indexterm><programlisting><link linkend="GnomeProgram">GnomeProgram</link> *      gnome_program_initv                 (<link linkend="GType">GType</link> type,
                                                         const <link linkend="char">char</link> *app_id,
                                                         const <link linkend="char">char</link> *app_version,
                                                         const <link linkend="GnomeModuleInfo">GnomeModuleInfo</link> *module_info,
                                                         <link linkend="int">int</link> argc,
                                                         <link linkend="char">char</link> **argv,
                                                         const <link linkend="char">char</link> *first_property_name,
                                                         <link linkend="va-list">va_list</link> args);</programlisting>
<para>
Provides a non-varargs form of <link linkend="gnome-program-init"><function>gnome_program_init()</function></link>. Users will rarely need
to call this function directly.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara> The type of application to be initialized (usually
<link linkend="GNOME-TYPE-PROGRAM--CAPS"><type>GNOME_TYPE_PROGRAM</type></link>).
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>app_id</parameter>&#160;:</term>
<listitem><simpara> Application ID string.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>app_version</parameter>&#160;:</term>
<listitem><simpara> Application version string.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>module_info</parameter>&#160;:</term>
<listitem><simpara> The modules to init with the application.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>argc</parameter>&#160;:</term>
<listitem><simpara> The number of command line arguments contained in <parameter>argv</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>argv</parameter>&#160;:</term>
<listitem><simpara> A string array of command line arguments.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>first_property_name</parameter>&#160;:</term>
<listitem><simpara> The first item in a <link linkend="NULL--CAPS"><literal>NULL</literal></link>-terminated list of attribute
name/value.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>args</parameter>&#160;:</term>
<listitem><simpara> The remaining elements in the <link linkend="NULL--CAPS"><literal>NULL</literal></link> terminated list (of which
<parameter>first_property_name</parameter> is the first element).
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A <link linkend="GnomeProgram"><type>GnomeProgram</type></link> instance representing the current application.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnome-program-get" role="function">
<title>gnome_program_get ()</title>
<indexterm zone="gnome-program-get"><primary sortas="gnome_program_get">gnome_program_get</primary></indexterm><programlisting><link linkend="GnomeProgram">GnomeProgram</link> *      gnome_program_get                   (void);</programlisting>
<para>
Retrieves an object that stored information about the application's state.
Other functions assume this will always return a <link linkend="GnomeProgram"><type>GnomeProgram</type></link> object which
(if not <link linkend="NULL--CAPS"><literal>NULL</literal></link>) has already been initialized.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The application's <link linkend="GnomeProgram"><type>GnomeProgram</type></link> instance, or <link linkend="NULL--CAPS"><literal>NULL</literal></link> if it does not
exist.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnome-program-get-human-readable-name" role="function">
<title>gnome_program_get_human_readable_name ()</title>
<indexterm zone="gnome-program-get-human-readable-name"><primary sortas="gnome_program_get_human_readable_name">gnome_program_get_human_readable_name</primary></indexterm><programlisting>const <link linkend="char">char</link> *        gnome_program_get_human_readable_name
                                                        (<link linkend="GnomeProgram">GnomeProgram</link> *program);</programlisting>
<para>
This function returns a pointer to a static string that the
application has provided as a human readable name. The app
should provide the name with the <link linkend="GNOME-PARAM-HUMAN-READABLE-NAME--CAPS"><type>GNOME_PARAM_HUMAN_READABLE_NAME</type></link>
init argument. Returns <link linkend="NULL--CAPS"><literal>NULL</literal></link> if no name was set.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>program</parameter>&#160;:</term>
<listitem><simpara> The application object
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> Application human-readable name string.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnome-program-get-app-id" role="function">
<title>gnome_program_get_app_id ()</title>
<indexterm zone="gnome-program-get-app-id"><primary sortas="gnome_program_get_app_id">gnome_program_get_app_id</primary></indexterm><programlisting>const <link linkend="char">char</link> *        gnome_program_get_app_id            (<link linkend="GnomeProgram">GnomeProgram</link> *program);</programlisting>
<para>
This function returns a pointer to a static string that the
application has provided as an identifier. This is not meant as a
human-readable identifier so much as a unique identifier for
programs and libraries.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>program</parameter>&#160;:</term>
<listitem><simpara> The program object
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> Application ID string.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnome-program-get-app-version" role="function">
<title>gnome_program_get_app_version ()</title>
<indexterm zone="gnome-program-get-app-version"><primary sortas="gnome_program_get_app_version">gnome_program_get_app_version</primary></indexterm><programlisting>const <link linkend="char">char</link> *        gnome_program_get_app_version       (<link linkend="GnomeProgram">GnomeProgram</link> *program);</programlisting>
<para>
This function returns a pointer to a static string that the
application has provided as a version number. This is not meant as a
human-readable identifier so much as a unique identifier for
programs and libraries.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>program</parameter>&#160;:</term>
<listitem><simpara> The application object
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> Application version string.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnome-program-locate-file" role="function">
<title>gnome_program_locate_file ()</title>
<indexterm zone="gnome-program-locate-file"><primary sortas="gnome_program_locate_file">gnome_program_locate_file</primary></indexterm><programlisting><link linkend="gchar">gchar</link> *             gnome_program_locate_file           (<link linkend="GnomeProgram">GnomeProgram</link> *program,
                                                         <link linkend="GnomeFileDomain">GnomeFileDomain</link> domain,
                                                         const <link linkend="gchar">gchar</link> *file_name,
                                                         <link linkend="gboolean">gboolean</link> only_if_exists,
                                                         <link linkend="GSList">GSList</link> **ret_locations);</programlisting>
<para>
This function finds a full path to the <parameter>file_name</parameter> located in the specified
"domain". A domain is a name for a collection of related files.
For example, common domains are "libdir", "pixmap", and "config".
</para>
<para>
If <parameter>ret_locations</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>, only one pathname is returned. Otherwise,
alternative paths are returned in <parameter>ret_locations</parameter>.
</para>
<para>
User applications should store files in the GNOME_FILE_DOMAIN_APP_*
domains. However you MUST set the correct attributes for <link linkend="GnomeProgram"><type>GnomeProgram</type></link> for
the APP specific prefixes (during the initialization part of the
application).
</para>
<para>
The <parameter>ret_locations</parameter> list and its contents should be freed by the caller, as
should the returned string.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>program</parameter>&#160;:</term>
<listitem><simpara> A valid <link linkend="GnomeProgram"><type>GnomeProgram</type></link> object or <link linkend="NULL--CAPS"><literal>NULL</literal></link> (in which case the current
application is used).
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>domain</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GnomeFileDomain"><type>GnomeFileDomain</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>file_name</parameter>&#160;:</term>
<listitem><simpara> A file name or path inside the 'domain' to find.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>only_if_exists</parameter>&#160;:</term>
<listitem><simpara> Only return a full pathname if the specified file
                 actually exists
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret_locations</parameter>&#160;:</term>
<listitem><simpara> If this is not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, a list of all the possible locations
                of the file will be returned.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The full path to the file (if it exists or only_if_exists is
         <link linkend="FALSE--CAPS"><literal>FALSE</literal></link>) or <link linkend="NULL--CAPS"><literal>NULL</literal></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnome-program-module-register" role="function">
<title>gnome_program_module_register ()</title>
<indexterm zone="gnome-program-module-register"><primary sortas="gnome_program_module_register">gnome_program_module_register</primary></indexterm><programlisting><link linkend="void">void</link>                gnome_program_module_register       (const <link linkend="GnomeModuleInfo">GnomeModuleInfo</link> *module_info);</programlisting>
<para>
This function is used to register a module to be initialized by the
GNOME library framework. The memory pointed to by <parameter>module_info</parameter> must be
valid during the whole application initialization process, and the module
described by <parameter>module_info</parameter> must only use the <parameter>module_info</parameter> pointer to
register itself.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>module_info</parameter>&#160;:</term>
<listitem><simpara> A pointer to a GnomeModuleInfo structure describing the module
              to be initialized
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnome-program-module-registered" role="function">
<title>gnome_program_module_registered ()</title>
<indexterm zone="gnome-program-module-registered"><primary sortas="gnome_program_module_registered">gnome_program_module_registered</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gnome_program_module_registered     (const <link linkend="GnomeModuleInfo">GnomeModuleInfo</link> *module_info);</programlisting>
<para>
This method checks to see whether a specific module has been
             initialized in the specified program.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>module_info</parameter>&#160;:</term>
<listitem><simpara> A pointer to a GnomeModuleInfo structure describing the module
              to be queried
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A value indicating whether the specified module has been
         registered/initialized in the current program
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnome-program-module-load" role="function">
<title>gnome_program_module_load ()</title>
<indexterm zone="gnome-program-module-load"><primary sortas="gnome_program_module_load">gnome_program_module_load</primary></indexterm><programlisting>const <link linkend="GnomeModuleInfo">GnomeModuleInfo</link> * gnome_program_module_load       (const <link linkend="char">char</link> *mod_name);</programlisting>
<para>
Loads a shared library that contains a
<link linkend="GnomeModuleInfo"><type>GnomeModuleInfo</type></link> dynamic_module_info structure.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>mod_name</parameter>&#160;:</term>
<listitem><simpara> module name
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The <link linkend="GnomeModuleInfo"><type>GnomeModuleInfo</type></link> structure that was loaded, or <link linkend="NULL--CAPS"><literal>NULL</literal></link> if the
module could not be loaded.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnome-program-install-property" role="function">
<title>gnome_program_install_property ()</title>
<indexterm zone="gnome-program-install-property"><primary sortas="gnome_program_install_property">gnome_program_install_property</primary></indexterm><programlisting><link linkend="guint">guint</link>               gnome_program_install_property      (<link linkend="GnomeProgramClass">GnomeProgramClass</link> *pclass,
                                                         <link linkend="GObjectGetPropertyFunc">GObjectGetPropertyFunc</link> get_fn,
                                                         <link linkend="GObjectSetPropertyFunc">GObjectSetPropertyFunc</link> set_fn,
                                                         <link linkend="GParamSpec">GParamSpec</link> *pspec);</programlisting>
<para>
Install a collection of available properties, their default values and the
functions to set and retrieve these properties.
</para>
<para>
Normal applications will never need to call this function, it is mostly for
use by other platform library authors.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pclass</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GnomeProgramClass"><type>GnomeProgramClass</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>get_fn</parameter>&#160;:</term>
<listitem><simpara> A function to get property values.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>set_fn</parameter>&#160;:</term>
<listitem><simpara> A function to set property values.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pspec</parameter>&#160;:</term>
<listitem><simpara> A collection of properties.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The number of properties installed.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnome-program-preinit" role="function" condition="deprecated:2.18: Use gnome_program_init() instead.">
<title>gnome_program_preinit ()</title>
<indexterm zone="gnome-program-preinit" role="deprecated"><primary sortas="gnome_program_preinit">gnome_program_preinit</primary></indexterm><programlisting><link linkend="poptContext">poptContext</link>         gnome_program_preinit               (<link linkend="GnomeProgram">GnomeProgram</link> *program,
                                                         const <link linkend="char">char</link> *app_id,
                                                         const <link linkend="char">char</link> *app_version,
                                                         <link linkend="int">int</link> argc,
                                                         <link linkend="char">char</link> **argv);</programlisting>
<warning><para><literal>gnome_program_preinit</literal> has been deprecated since version 2.18 and should not be used in newly-written code. Use <link linkend="gnome-program-init"><function>gnome_program_init()</function></link> instead.</para></warning>
<para>
This function performs the portion of application initialization that
needs to be done prior to command line argument parsing. The poptContext
returned can be used for <link linkend="getopt"><function>getopt()</function></link>-style option processing.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>program</parameter>&#160;:</term>
<listitem><simpara> Application object
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>app_id</parameter>&#160;:</term>
<listitem><simpara> application ID string
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>app_version</parameter>&#160;:</term>
<listitem><simpara> application version string
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>argc</parameter>&#160;:</term>
<listitem><simpara> The number of commmand line arguments contained in 'argv'
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>argv</parameter>&#160;:</term>
<listitem><simpara> A string array of command line arguments
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A poptContext representing the argument parsing state,
or <link linkend="NULL--CAPS"><literal>NULL</literal></link> if using GOption argument parsing.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnome-program-parse-args" role="function" condition="deprecated:2.18: Use gnome_program_init() instead.">
<title>gnome_program_parse_args ()</title>
<indexterm zone="gnome-program-parse-args" role="deprecated"><primary sortas="gnome_program_parse_args">gnome_program_parse_args</primary></indexterm><programlisting><link linkend="void">void</link>                gnome_program_parse_args            (<link linkend="GnomeProgram">GnomeProgram</link> *program);</programlisting>
<warning><para><literal>gnome_program_parse_args</literal> has been deprecated since version 2.18 and should not be used in newly-written code. Use <link linkend="gnome-program-init"><function>gnome_program_init()</function></link> instead.</para></warning>
<para>
Parses the command line arguments for the application</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>program</parameter>&#160;:</term>
<listitem><simpara> Application object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnome-program-postinit" role="function" condition="deprecated:2.18: Use gnome_program_init() instead.">
<title>gnome_program_postinit ()</title>
<indexterm zone="gnome-program-postinit" role="deprecated"><primary sortas="gnome_program_postinit">gnome_program_postinit</primary></indexterm><programlisting><link linkend="void">void</link>                gnome_program_postinit              (<link linkend="GnomeProgram">GnomeProgram</link> *program);</programlisting>
<warning><para><literal>gnome_program_postinit</literal> has been deprecated since version 2.18 and should not be used in newly-written code. Use <link linkend="gnome-program-init"><function>gnome_program_init()</function></link> instead.</para></warning>
<para>
Called after <link linkend="gnome-program-parse-args"><function>gnome_program_parse_args()</function></link>, this function
takes care of post-parse initialization and cleanup</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>program</parameter>&#160;:</term>
<listitem><simpara> Application object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="GNOME-PARAM-POPT-TABLE--CAPS" role="macro" condition="deprecated">
<title>GNOME_PARAM_POPT_TABLE</title>
<indexterm zone="GNOME-PARAM-POPT-TABLE--CAPS" role="deprecated"><primary sortas="GNOME_PARAM_POPT_TABLE">GNOME_PARAM_POPT_TABLE</primary></indexterm><programlisting>#define GNOME_PARAM_POPT_TABLE          "popt-table"
</programlisting>
<warning><para><literal>GNOME_PARAM_POPT_TABLE</literal> is deprecated and should not be used in newly-written code. 2.14. Use GOption argument parsing instead,
with <link linkend="GNOME-PARAM-GOPTION-CONTEXT--CAPS"><type>GNOME_PARAM_GOPTION_CONTEXT</type></link>.</para></warning>
<para>
This parameter contains the table of options to be passed to popt (write on
init only). Mutually exclusive with using <link linkend="GNOME-PARAM-GOPTION-CONTEXT--CAPS"><type>GNOME_PARAM_GOPTION_CONTEXT</type></link>
parameter.
</para></refsect2>
<refsect2 id="GNOME-PARAM-POPT-FLAGS--CAPS" role="macro" condition="deprecated:2.14. Use GOption argument parsing instead.">
<title>GNOME_PARAM_POPT_FLAGS</title>
<indexterm zone="GNOME-PARAM-POPT-FLAGS--CAPS" role="deprecated"><primary sortas="GNOME_PARAM_POPT_FLAGS">GNOME_PARAM_POPT_FLAGS</primary></indexterm><programlisting>#define GNOME_PARAM_POPT_FLAGS          "popt-flags"
</programlisting>
<warning><para><literal>GNOME_PARAM_POPT_FLAGS</literal> is deprecated and should not be used in newly-written code. 2.14. Use GOption argument parsing instead.</para></warning>
<para>
This parameter contains the flags to use for popt (write on init only).
</para></refsect2>
<refsect2 id="GNOME-PARAM-POPT-CONTEXT--CAPS" role="macro" condition="deprecated:2.14. Use GOption argument parsing instead.">
<title>GNOME_PARAM_POPT_CONTEXT</title>
<indexterm zone="GNOME-PARAM-POPT-CONTEXT--CAPS" role="deprecated"><primary sortas="GNOME_PARAM_POPT_CONTEXT">GNOME_PARAM_POPT_CONTEXT</primary></indexterm><programlisting>#define GNOME_PARAM_POPT_CONTEXT        "popt-context"
</programlisting>
<warning><para><literal>GNOME_PARAM_POPT_CONTEXT</literal> is deprecated and should not be used in newly-written code. 2.14. Use GOption argument parsing instead.</para></warning>
<para>
This parameter contains the context pointer that <link linkend="GnomeProgram"><type>GnomeProgram</type></link> is using for
popt parsing (readable).
</para></refsect2>
<refsect2 id="GNOME-PARAM-GOPTION-CONTEXT--CAPS" role="macro" condition="since:2.14">
<title>GNOME_PARAM_GOPTION_CONTEXT</title>
<indexterm zone="GNOME-PARAM-GOPTION-CONTEXT--CAPS" role="2.14"><primary sortas="GNOME_PARAM_GOPTION_CONTEXT">GNOME_PARAM_GOPTION_CONTEXT</primary></indexterm><programlisting>#define GNOME_PARAM_GOPTION_CONTEXT     "goption-context"
</programlisting>
<para>
This parameter contains the GOptionContext pointer that <link linkend="GnomeProgram"><type>GnomeProgram</type></link> is using for
GOption parsing (write on init only). The <link linkend="GnomeProgram"><type>GnomeProgram</type></link> will assume ownership of the
passed <link linkend="GOptionContext"><type>GOptionContext</type></link>.
Mutually exclusive with using the <link linkend="GNOME-PARAM-POPT-TABLE--CAPS"><type>GNOME_PARAM_POPT_TABLE</type></link> parameter.
</para><para role="since">Since 2.14</para></refsect2>
<refsect2 id="GNOME-PARAM-CREATE-DIRECTORIES--CAPS" role="macro">
<title>GNOME_PARAM_CREATE_DIRECTORIES</title>
<indexterm zone="GNOME-PARAM-CREATE-DIRECTORIES--CAPS"><primary sortas="GNOME_PARAM_CREATE_DIRECTORIES">GNOME_PARAM_CREATE_DIRECTORIES</primary></indexterm><programlisting>#define GNOME_PARAM_CREATE_DIRECTORIES  "create-directories"
</programlisting>
<para>
This parameter contains <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the standard GNOME directories should be
created on startup.
</para></refsect2>
<refsect2 id="GNOME-PARAM-ENABLE-SOUND--CAPS" role="macro">
<title>GNOME_PARAM_ENABLE_SOUND</title>
<indexterm zone="GNOME-PARAM-ENABLE-SOUND--CAPS"><primary sortas="GNOME_PARAM_ENABLE_SOUND">GNOME_PARAM_ENABLE_SOUND</primary></indexterm><programlisting>#define GNOME_PARAM_ENABLE_SOUND        "enable-sound"
</programlisting>
<para>
This parameter determines whether or not to enable sound on startup.
</para></refsect2>
<refsect2 id="GNOME-PARAM-ESPEAKER--CAPS" role="macro">
<title>GNOME_PARAM_ESPEAKER</title>
<indexterm zone="GNOME-PARAM-ESPEAKER--CAPS"><primary sortas="GNOME_PARAM_ESPEAKER">GNOME_PARAM_ESPEAKER</primary></indexterm><programlisting>#define GNOME_PARAM_ESPEAKER            "espeaker"
</programlisting>
<para>
This parameter describes how to connect to esd.
</para></refsect2>
<refsect2 id="GNOME-PARAM-APP-ID--CAPS" role="macro">
<title>GNOME_PARAM_APP_ID</title>
<indexterm zone="GNOME-PARAM-APP-ID--CAPS"><primary sortas="GNOME_PARAM_APP_ID">GNOME_PARAM_APP_ID</primary></indexterm><programlisting>#define GNOME_PARAM_APP_ID              "app-id"
</programlisting>
<para>
This parameter contains the ID string to use for the application (readable).
</para></refsect2>
<refsect2 id="GNOME-PARAM-APP-VERSION--CAPS" role="macro">
<title>GNOME_PARAM_APP_VERSION</title>
<indexterm zone="GNOME-PARAM-APP-VERSION--CAPS"><primary sortas="GNOME_PARAM_APP_VERSION">GNOME_PARAM_APP_VERSION</primary></indexterm><programlisting>#define GNOME_PARAM_APP_VERSION         "app-version"
</programlisting>
<para>
This parameter contains the application version (readable).
</para></refsect2>
<refsect2 id="GNOME-PARAM-GNOME-PREFIX--CAPS" role="macro">
<title>GNOME_PARAM_GNOME_PREFIX</title>
<indexterm zone="GNOME-PARAM-GNOME-PREFIX--CAPS"><primary sortas="GNOME_PARAM_GNOME_PREFIX">GNOME_PARAM_GNOME_PREFIX</primary></indexterm><programlisting>#define GNOME_PARAM_GNOME_PREFIX        "gnome-prefix"
</programlisting>
<para>
This parameter contains the prefix where the main GNOME system is installed
(readable, writable on init only).
</para></refsect2>
<refsect2 id="GNOME-PARAM-GNOME-SYSCONFDIR--CAPS" role="macro">
<title>GNOME_PARAM_GNOME_SYSCONFDIR</title>
<indexterm zone="GNOME-PARAM-GNOME-SYSCONFDIR--CAPS"><primary sortas="GNOME_PARAM_GNOME_SYSCONFDIR">GNOME_PARAM_GNOME_SYSCONFDIR</primary></indexterm><programlisting>#define GNOME_PARAM_GNOME_SYSCONFDIR    "gnome-sysconfdir"
</programlisting>
<para>
This parameter contains the prefix where the GNOME configuration files
are installed (readable, writable on init only).
</para></refsect2>
<refsect2 id="GNOME-PARAM-GNOME-DATADIR--CAPS" role="macro">
<title>GNOME_PARAM_GNOME_DATADIR</title>
<indexterm zone="GNOME-PARAM-GNOME-DATADIR--CAPS"><primary sortas="GNOME_PARAM_GNOME_DATADIR">GNOME_PARAM_GNOME_DATADIR</primary></indexterm><programlisting>#define GNOME_PARAM_GNOME_DATADIR       "gnome-datadir"
</programlisting>
<para>
This parameter contains the prefix where the GNOME data files are installed
(readable, writable on init only).
</para></refsect2>
<refsect2 id="GNOME-PARAM-GNOME-LIBDIR--CAPS" role="macro">
<title>GNOME_PARAM_GNOME_LIBDIR</title>
<indexterm zone="GNOME-PARAM-GNOME-LIBDIR--CAPS"><primary sortas="GNOME_PARAM_GNOME_LIBDIR">GNOME_PARAM_GNOME_LIBDIR</primary></indexterm><programlisting>#define GNOME_PARAM_GNOME_LIBDIR        "gnome-libdir"
</programlisting>
<para>
This parameter contains the prefix where the GNOME library files are installed
(readable, writable on init only).
</para></refsect2>
<refsect2 id="GNOME-PARAM-APP-PREFIX--CAPS" role="macro">
<title>GNOME_PARAM_APP_PREFIX</title>
<indexterm zone="GNOME-PARAM-APP-PREFIX--CAPS"><primary sortas="GNOME_PARAM_APP_PREFIX">GNOME_PARAM_APP_PREFIX</primary></indexterm><programlisting>#define GNOME_PARAM_APP_PREFIX          "app-prefix"
</programlisting>
<para>
This parameter contains the prefix where this application was installed
(read / write).
</para></refsect2>
<refsect2 id="GNOME-PARAM-APP-SYSCONFDIR--CAPS" role="macro">
<title>GNOME_PARAM_APP_SYSCONFDIR</title>
<indexterm zone="GNOME-PARAM-APP-SYSCONFDIR--CAPS"><primary sortas="GNOME_PARAM_APP_SYSCONFDIR">GNOME_PARAM_APP_SYSCONFDIR</primary></indexterm><programlisting>#define GNOME_PARAM_APP_SYSCONFDIR      "app-sysconfdir"
</programlisting>
<para>
This parameter contains the prefix where this application's configuration files
are installed (read / write).
</para></refsect2>
<refsect2 id="GNOME-PARAM-APP-DATADIR--CAPS" role="macro">
<title>GNOME_PARAM_APP_DATADIR</title>
<indexterm zone="GNOME-PARAM-APP-DATADIR--CAPS"><primary sortas="GNOME_PARAM_APP_DATADIR">GNOME_PARAM_APP_DATADIR</primary></indexterm><programlisting>#define GNOME_PARAM_APP_DATADIR         "app-datadir"
</programlisting>
<para>
This parameter contains the prefix where this application's data files are
installed (read / write).
</para></refsect2>
<refsect2 id="GNOME-PARAM-APP-LIBDIR--CAPS" role="macro">
<title>GNOME_PARAM_APP_LIBDIR</title>
<indexterm zone="GNOME-PARAM-APP-LIBDIR--CAPS"><primary sortas="GNOME_PARAM_APP_LIBDIR">GNOME_PARAM_APP_LIBDIR</primary></indexterm><programlisting>#define GNOME_PARAM_APP_LIBDIR          "app-libdir"
</programlisting>
<para>
This parameter contains the prefix where this application's library files are
installed (read / write).
</para></refsect2>
<refsect2 id="GNOME-PARAM-HUMAN-READABLE-NAME--CAPS" role="macro">
<title>GNOME_PARAM_HUMAN_READABLE_NAME</title>
<indexterm zone="GNOME-PARAM-HUMAN-READABLE-NAME--CAPS"><primary sortas="GNOME_PARAM_HUMAN_READABLE_NAME">GNOME_PARAM_HUMAN_READABLE_NAME</primary></indexterm><programlisting>#define GNOME_PARAM_HUMAN_READABLE_NAME "human-readable-name"
</programlisting>
<para>
This parameter contains the human readable name of the application (readable).
</para></refsect2>
<refsect2 id="GNOME-PARAM-GNOME-PATH--CAPS" role="macro">
<title>GNOME_PARAM_GNOME_PATH</title>
<indexterm zone="GNOME-PARAM-GNOME-PATH--CAPS"><primary sortas="GNOME_PARAM_GNOME_PATH">GNOME_PARAM_GNOME_PATH</primary></indexterm><programlisting>#define GNOME_PARAM_GNOME_PATH          "gnome-path"
</programlisting>
<para>
This parameter contains the path in which to look for installed files (taken
from the GNOME2_PATH environment variable).
</para></refsect2>
<refsect2 id="GNOME-PARAM-NONE--CAPS" role="macro">
<title>GNOME_PARAM_NONE</title>
<indexterm zone="GNOME-PARAM-NONE--CAPS"><primary sortas="GNOME_PARAM_NONE">GNOME_PARAM_NONE</primary></indexterm><programlisting>#define GNOME_PARAM_NONE                NULL
</programlisting>
<para>
Used to terminate a list of parameters and their values.
</para></refsect2>
<refsect2 id="GNOME-PROGRAM-STANDARD-PROPERTIES--CAPS" role="macro">
<title>GNOME_PROGRAM_STANDARD_PROPERTIES</title>
<indexterm zone="GNOME-PROGRAM-STANDARD-PROPERTIES--CAPS"><primary sortas="GNOME_PROGRAM_STANDARD_PROPERTIES">GNOME_PROGRAM_STANDARD_PROPERTIES</primary></indexterm><programlisting>#define             GNOME_PROGRAM_STANDARD_PROPERTIES</programlisting>
<para>
When PREFIX, SYSCONFDIR, DATADIR and LIBDIR are defined during the build
process, this macro can be used to assign these values to
<link linkend="GNOME-PARAM-APP-PREFIX--CAPS"><type>GNOME_PARAM_APP_PREFIX</type></link>, <link linkend="GNOME-PARAM-APP-SYSCONFDIR--CAPS"><type>GNOME_PARAM_APP_SYSCONFDIR</type></link>, <link linkend="GNOME-PARAM-APP-DATADIR--CAPS"><type>GNOME_PARAM_APP_DATADIR</type></link>
and <link linkend="GNOME-PARAM-APP-LIBDIR--CAPS"><type>GNOME_PARAM_APP_LIBDIR</type></link> respectively so that the GNOME libraries
automatically know where to fetch application specific data from.  </para>
<para>
Every respectable GNOME application should set these variables and use
GNOME_PROGRAM_STANDARD_PROPERTIES in the call to <link linkend="gnome-program-init"><function>gnome_program_init()</function></link>.
</para></refsect2>

</refsect1>




</refentry>
